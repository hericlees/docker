# Exemplo de criação de uma imagem em node

FROM node:14
WORKDIR /app-node
COPY . .
RUN npm install
ENTRYPOINT npm start


Esse é um **Dockerfile**, que é um arquivo usado para **criar imagens de contêineres** no Docker. Vamos analisar cada instrução:

1. **`FROM node:14`**:
    - Essa instrução define a **imagem base** para o contêiner. Neste caso, estamos usando a imagem oficial do **Node.js** na versão **14**.
    - O contêiner será construído com base nessa imagem, que já inclui o Node.js e outras dependências.

2. **`WORKDIR /app-node`**:
    - Essa instrução define o **diretório de trabalho** dentro do contêiner.
    - Todos os comandos subsequentes serão executados a partir desse diretório.
    - No caso, estamos definindo o diretório como `/app-node`.

3. **`COPY . .`**:
    - Essa instrução copia os arquivos do **diretório atual** (onde o Dockerfile está localizado) para o diretório de trabalho dentro do contêiner.
    - O primeiro ponto (`.`) refere-se ao **diretório de origem** (atual), e o segundo ponto (`.`) refere-se ao **diretório de destino** (diretório de trabalho).

4. **`RUN npm install`**:
    - Essa instrução executa o comando `npm install` dentro do contêiner.
    - Ela instala as **dependências do aplicativo Node.js** especificadas no arquivo `package.json`.
    - Isso é importante para garantir que todas as bibliotecas necessárias estejam disponíveis no contêiner.

5. **`ENTRYPOINT npm start`**:
    - Essa instrução define o **comando de entrada** para o contêiner.
    - Quando o contêiner é iniciado, ele executará o comando `npm start`.
    - Isso geralmente é usado para iniciar o servidor ou aplicativo dentro do contêiner.

Em resumo, esse Dockerfile cria um contêiner baseado na imagem do Node.js 14, copia os arquivos do diretório atual para o diretório de trabalho no contêiner, instala as dependências e, ao iniciar o contêiner, executa o comando `npm start` para iniciar o aplicativo Node.js. 🐳🚀

Origem: 
(1) Dockerizing a Node.js App: A Comprehensive Guide for Easy Deployment. https://dev.to/burakboduroglu/dockerizing-a-nodejs-app-a-comprehensive-guide-for-easy-deployment-13o1.
(2) [Dúvida] Erro na execução do container node | Fórum Alura. https://cursos.alura.com.br/forum/topico-duvida-erro-na-execucao-do-container-node-282268.
(3) Crafting multi-stage builds with Docker in Node.js - DEV Community. https://www.cloudnweb.dev/2019/10/crafting-multi-stage-builds-with-docker-in-node-js/.
(4) Copy output of npm install to docker container - Stack Overflow. https://stackoverflow.com/questions/63225434/copy-output-of-npm-install-to-docker-container.
(5) What is the point of WORKDIR on Dockerfile? - Stack Overflow. https://stackoverflow.com/questions/51066146/what-is-the-point-of-workdir-on-dockerfile.
(6) How To Build a Node.js Application with Docker | DigitalOcean. https://www.digitalocean.com/community/tutorials/how-to-build-a-node-js-application-with-docker.


# Para criar um nome, ou seja, etiquetar a nossa imagem

docker build -t danielartine/app-node:1 .


# Para alterar a porta. Ex.: 3000 para 8081

docker run -d –p 8081:3000 danielartine/app-node:1.0

# Para expor a porta, só adcionar o expose e o nº da porta

FROM node:14
WORKDIR /app-node
EXPOSE 3000
COPY . .
RUN npm install
ENTRYPOINT npm start


# Criando a conta no Docker Hub

Primeiro, é necessário que você crie uma conta na parte direita da home do Docker Hub. Insira seu nome de usuário, e-mail, senha, aceite os termos e marque a opção recaptcha. 
Depois, clique em "Sign up" e confirme sua conta por e-mail.


# Autenticando a conta do Docker Hub

Precisamos voltar ao nosso terminal e autenticar a nossa conta no Command Line Interface (Interface de Linha de Comando) do Docker, para que ele saiba que somos.

Para isso, usamos o comando 

docker login -u nomedousuário

Ao pressionar "Enter", será solicitada a senha (password) que usou durante o cadastro no Docker Hub. Por questões de segurança, o número de caracteres não aparecerá, mas estará sendo digitado.


# Subindo a imagem para o Docker Hub

docker push nomedousuario/imagemcriada:1.0

O comando `docker push` é usado para **enviar** (ou **empurrar**) **imagens Docker** para um **repositório**. Vamos entender o que cada parte desse comando significa:

1. **`docker`**: Refere-se ao utilitário de linha de comando do Docker.
2. **`push`**: É o subcomando que indica que queremos enviar uma imagem para um repositório.
3. **`nomedousuario/imagemcriada:1.0`**: É a **tag** da imagem que estamos enviando. Vamos quebrar isso em partes:
    - **`nomedousuario`**: É o nome do **repositório** (ou **registry**). Pode ser um registro público como o Docker Hub ou um registro privado.
    - **`imagemcriada`**: É o nome da **imagem** que estamos enviando.
    - **`:1.0`**: É a **tag** específica dessa imagem. Neste caso, estamos enviando a versão `1.0`.

Aqui está o fluxo geral do que acontece quando você executa `docker push`:

1. Você **constrói** uma imagem Docker localmente (por exemplo, usando `docker build`).
2. Essa imagem é **marcada** com uma **tag** específica (como `1.0`).
3. Você executa `docker push` para enviar essa imagem para um **repositório** (como o Docker Hub).
4. O Docker envia a imagem para o repositório especificado, tornando-a disponível para outras pessoas ou máquinas.

Em resumo, o comando `docker push` é usado para **distribuir** suas imagens Docker para que outros possam usá-las ou implantá-las em seus próprios ambientes. É uma parte fundamental do ciclo de vida de desenvolvimento e implantação de contêineres. 🐳🚀

Origem: conversa com o Bing, 11/04/2024
(1) Docker: How to authenticate for docker push? - Stack Overflow. https://stackoverflow.com/questions/34434231/docker-how-to-authenticate-for-docker-push.
(2) Building and Dockerizing a Node.js | by Liliane Konissi | Medium. https://medium.com/@lilnya79/building-and-dockerizing-a-node-js-app-from-scratch-and-pushing-it-to-docker-hub-201451967720.
(3) How To Build a Node.js Application with Docker | DigitalOcean. https://www.digitalocean.com/community/tutorials/how-to-build-a-node-js-application-with-docker.
(4) undefined. https://docs.docker.com/mac/step_six/.
